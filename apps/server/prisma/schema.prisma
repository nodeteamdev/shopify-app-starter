// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Shop {
  id               String           @id(map: "pk_Shop")
  name             String
  email            String
  contactEmail     String
  myshopifyDomain  String
  primaryDomain    String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  appSubscription  AppSubscription?
  sessions         Session[]
  status           ShopStatusesEnum @default(ACTIVE)
  appUninstalledAt DateTime?
  orders           Order[]

  @@map("shops")
}

model Session {
  id        String   @id(map: "pk_Session")
  content   Json
  shopName  String
  createdAt DateTime @default(now())
  shop      Shop     @relation(fields: [shopId], references: [id])
  shopId    String

  @@map("sessions")
}

model User {
  id              String    @id(map: "pk_User") @db.Uuid
  email           String?   @unique
  isEmailVerified Boolean   @default(false)
  firstName       String
  lastName        String
  avatarUrl       String?
  password        String?
  role            RolesEnum
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("users")
}

model Webhook {
  id        String   @id(map: "pk_Webhook")
  topic     String
  body      Json
  headers   Json
  createdAt DateTime @default(now())

  @@map("webhooks")
}

model AppSubscription {
  id                 String                      @id(map: "pk_AppSubscription")
  name               String
  confirmationUrl    String
  amount             Int
  currencyCode       String
  status             AppSubscriptionStatusesEnum
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt
  shop               Shop                        @relation(fields: [shopId], references: [id])
  shopId             String                      @unique
  subscriptionPlan   SubscriptionPlan            @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId String                      @db.Uuid

  @@map("app_subscriptions")
}

model SubscriptionPlan {
  id               String                       @id(map: "pk_SubscriptionPlan") @db.Uuid
  name             String
  description      String?
  amount           Int
  currencyCode     String
  status           SubscriptionPlanStatusesEnum
  createdAt        DateTime                     @default(now())
  updatedAt        DateTime                     @updatedAt
  appSubscriptions AppSubscription[]

  @@map("subscription_plans")
}

model Order {
  id                     String   @id(map: "pk_Order")
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  discountCodes          String[]
  currencyCode           String
  displayFinancialStatus String
  lineItems              Json[]
  shop                   Shop     @relation(fields: [shopId], references: [id])
  shopId                 String

  @@map("orders")
}

enum RolesEnum {
  CUSTOMER
  SUPER_ADMIN
}

enum AppSubscriptionStatusesEnum {
  ACTIVE
  CANCELLED
  DECLINED
  EXPIRED
  FROZEN
  PENDING
}

enum SubscriptionPlanStatusesEnum {
  ACTIVE
  INACTIVE
}

enum ShopStatusesEnum {
  ACTIVE
  INACTIVE
}
